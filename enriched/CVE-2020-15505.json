{"Modified": "2022-07-12T17:42:00", "Published": "2020-07-07T02:15:00", "access": {"authentication": "NONE", "complexity": "LOW", "vector": "NETWORK"}, "assigner": "cve@mitre.org", "capec": [{"id": "177", "name": "Create files with the same name as files protected with a higher classification", "prerequisites": "The target application must include external files. Most non-trivial applications meet this criterion. The target application does not verify that a located file is the one it was looking for through means other than the name. Many applications fail to perform checks of this type. The directories the target application searches to find the included file include directories writable by the attacker which are searched before the protected directory containing the actual files. It is much less common for applications to meet this criterion, but if an attacker can manipulate the application's search path (possibly by controlling environmental variables) then they can force this criterion to be met.", "related_weakness": ["706"], "solutions": "", "summary": "An attacker exploits file location algorithms in an operating system or application by creating a file with the same name as a protected or privileged file. The attacker could manipulate the system if the attacker-created file is trusted by the operating system or an application component that attempts to load the original file. Applications often load or include external files, such as libraries or configuration files. These files should be protected against malicious manipulation. However, if the application only uses the name of the file when locating it, an attacker may be able to create a file with the same name and place it in a directory that the application will search before the directory with the legitimate file is searched. Because the attackers' file is discovered first, it would be used by the target application. This attack can be extremely destructive if the referenced file is executable and/or is granted special privileges based solely on having a particular name."}, {"id": "641", "name": "DLL Side-Loading", "prerequisites": "The target must fail to verify the integrity of the DLL before using them.", "related_weakness": ["706"], "solutions": "Prevent unknown DLLs from loading through whitelisting policy. Patch installed applications as soon as new updates become available. Properly restrict the location of the software being used. Use of sxstrace.exe on Windows as well as manual inspection of the manifests. Require code signing and avoid using relative paths for resources.", "summary": "An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading."}, {"id": "48", "name": "Passing Local Filenames to Functions That Expect a URL", "prerequisites": "The victim's software must not differentiate between the location and type of reference passed the client software, e.g. browser", "related_weakness": ["241", "706"], "solutions": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production. Design: Use browser technologies that do not allow client side scripting. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Disable scripting languages such as JavaScript in browser", "summary": "This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks."}, {"id": "159", "name": "Redirect Access to Libraries", "prerequisites": "The target must utilize external libraries and must fail to verify the integrity of these libraries before using them.", "related_weakness": ["706"], "solutions": "Implementation: Restrict the permission to modify the entries in the configuration file. Implementation: Check the integrity of the dynamically linked libraries before use them. Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.", "summary": "An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation."}], "cvss": 7.5, "cvss-time": "2022-07-12T17:42:00", "cvss-vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "cwe": "CWE-706", "id": "CVE-2020-15505", "impact": {"availability": "PARTIAL", "confidentiality": "PARTIAL", "integrity": "PARTIAL"}, "last-modified": "2022-07-12T17:42:00", "references": ["https://www.mobileiron.com/en/blog/mobileiron-security-updates-available", "https://perchsecurity.com/perch-news/cve-spotlight-mobileiron-rce-cve-2020-15505/", "http://packetstormsecurity.com/files/161097/MobileIron-MDM-Hessian-Based-Java-Deserialization-Remote-Code-Execution.html", "https://cwe.mitre.org/data/definitions/41.html"], "refmap": {"confirm": ["https://www.mobileiron.com/en/blog/mobileiron-security-updates-available"], "misc": ["https://perchsecurity.com/perch-news/cve-spotlight-mobileiron-rce-cve-2020-15505/", "https://www.mobileiron.com/en/blog/mobileiron-security-updates-available"]}, "summary": "A remote code execution vulnerability in MobileIron Core & Connector versions 10.3.0.3 and earlier, 10.4.0.0, 10.4.0.1, 10.4.0.2, 10.4.0.3, 10.5.1.0, 10.5.2.0 and 10.6.0.0; and Sentry versions 9.7.2 and earlier, and 9.8.0; and Monitor and Reporting Database (RDB) version 2.0.0.1 and earlier that allows remote attackers to execute arbitrary code via unspecified vectors.", "vulnerable_configuration": [{"id": "cpe:2.3:a:mobileiron:core:10.6.0.0:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:core:10.6.0.0:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:core:10.5.2.0:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:core:10.5.2.0:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:core:10.4.0.0:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:core:10.4.0.0:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:core:10.4.0.1:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:core:10.4.0.1:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:core:10.4.0.2:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:core:10.4.0.2:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:core:10.4.0.3:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:core:10.4.0.3:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:core:-:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:core:-:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:core:10.3.0.3:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:core:10.3.0.3:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:enterprise_connector:10.6.0.0:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:enterprise_connector:10.6.0.0:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:enterprise_connector:10.5.2.0:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:enterprise_connector:10.5.2.0:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:enterprise_connector:10.4.0.0:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:enterprise_connector:10.4.0.0:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:enterprise_connector:10.4.0.1:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:enterprise_connector:10.4.0.1:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:enterprise_connector:10.4.0.2:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:enterprise_connector:10.4.0.2:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:enterprise_connector:10.4.0.3:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:enterprise_connector:10.4.0.3:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:enterprise_connector:-:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:enterprise_connector:-:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:enterprise_connector:10.3.0.3:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:enterprise_connector:10.3.0.3:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:sentry:9.7.0:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:sentry:9.7.0:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:sentry:9.7.2:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:sentry:9.7.2:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:core:10.5.1.0:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:core:10.5.1.0:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:enterprise_connector:10.5.1.0:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:enterprise_connector:10.5.1.0:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:monitor_and_reporting_database:-:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:monitor_and_reporting_database:-:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:monitor_and_reporting_database:2.0.0.1:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:monitor_and_reporting_database:2.0.0.1:*:*:*:*:*:*:*"}, {"id": "cpe:2.3:a:mobileiron:sentry:9.8.0:*:*:*:*:*:*:*", "title": "cpe:2.3:a:mobileiron:sentry:9.8.0:*:*:*:*:*:*:*"}], "vulnerable_configuration_cpe_2_2": [], "vulnerable_product": ["cpe:2.3:a:mobileiron:core:10.6.0.0:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:core:10.5.2.0:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:core:10.4.0.0:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:core:10.4.0.1:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:core:10.4.0.2:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:core:10.4.0.3:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:core:-:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:core:10.3.0.3:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:enterprise_connector:10.6.0.0:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:enterprise_connector:10.5.2.0:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:enterprise_connector:10.4.0.0:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:enterprise_connector:10.4.0.1:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:enterprise_connector:10.4.0.2:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:enterprise_connector:10.4.0.3:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:enterprise_connector:-:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:enterprise_connector:10.3.0.3:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:sentry:9.7.0:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:sentry:9.7.2:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:core:10.5.1.0:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:enterprise_connector:10.5.1.0:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:monitor_and_reporting_database:-:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:monitor_and_reporting_database:2.0.0.1:*:*:*:*:*:*:*", "cpe:2.3:a:mobileiron:sentry:9.8.0:*:*:*:*:*:*:*"]}