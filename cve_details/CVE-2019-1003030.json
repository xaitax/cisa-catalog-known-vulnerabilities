{
    "Modified": "2020-10-19T18:15:00",
    "Published": "2019-03-08T21:29:00",
    "access": {
        "authentication": "SINGLE",
        "complexity": "LOW",
        "vector": "NETWORK"
    },
    "assigner": "cve@mitre.org",
    "capec": [
        {
            "id": "237",
            "name": "Escaping a Sandbox by Calling Signed Code in Another Language",
            "prerequisites": "A framework-based language that supports code signing and sandbox (such as Java, .Net, JavaScript, and Flash) Deployed code that has been signed by its authoring vendor, or a partner",
            "related_weakness": [
                "693"
            ],
            "solutions": "Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them. Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries. Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library. Configuration: Get latest updates for the computer.",
            "summary": "The attacker may submit a malicious signed code from another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries."
        },
        {
            "id": "477",
            "name": "Signature Spoofing by Mixing Signed and Unsigned Content",
            "prerequisites": "Signer and recipient are using complex data storage structures that allow for a mix between signed and unsigned data Recipient is using signature verification software that does not maintain separation between signed and unsigned data once the signature has been verified.",
            "related_weakness": [
                "311",
                "319",
                "693"
            ],
            "solutions": "Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.",
            "summary": "An attacker exploits the underlying complexity of a data structure that allows for both signed and unsigned content, to cause unsigned data to be processed as though it were signed data."
        },
        {
            "id": "65",
            "name": "Sniff Application Code",
            "prerequisites": "The attacker must have the ability to place himself in the communication path between the client and server. The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts. The attacker must be able to employ a sniffer on the network without being detected.",
            "related_weakness": [
                "311",
                "318",
                "319",
                "693",
                "719"
            ],
            "solutions": "Design: Encrypt all communication between the client and server. Implementation: Use SSL, SSH, SCP. Operation: Use \"ifconfig/ipconfig\" or other tools to detect the sniffer installed in the network.",
            "summary": "An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server."
        },
        {
            "id": "74",
            "name": "Manipulating User State",
            "prerequisites": "User state is maintained at least in some way in user-controllable locations, such as cookies or URL parameters.",
            "related_weakness": [
                "315",
                "353",
                "371",
                "372",
                "693"
            ],
            "solutions": "Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state. Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations. Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.",
            "summary": "The adversary modifies state information maintained by the target software in user-accessible locations. If successful, the target software will use this tainted state information and execute in an unintended manner. State management is an important function within an application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits."
        },
        {
            "id": "57",
            "name": "Utilizing REST's Trust in the System Resource to Obtain Sensitive Data",
            "prerequisites": "Opportunity to intercept must exist beyond the point where SSL is terminated. The attacker must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path.",
            "related_weakness": [
                "287",
                "300",
                "693",
                "724"
            ],
            "solutions": "Implementation: Implement message level security such as HMAC in the HTTP communication Design: Utilize defense in depth, do not rely on a single security mechanism like SSL Design: Enforce principle of least privilege",
            "summary": "This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated. Rest applications premise is that they leverage existing infrastructure to deliver web services functionality. An example of this is a Rest application that uses HTTP Get methods and receives a HTTP response with an XML document. These Rest style web services are deployed on existing infrastructure such as Apache and IIS web servers with no SOAP stack required. Unfortunately from a security standpoint, there frequently is no interoperable identity security mechanism deployed, so Rest developers often fall back to SSL to deliver security. In large data centers, SSL is typically terminated at the edge of the network - at the firewall, load balancer, or router. Once the SSL is terminated the HTTP request is in the clear (unless developers have hashed or encrypted the values, but this is rare). The attacker can utilize a sniffer such as Wireshark to snapshot the credentials, such as username and password that are passed in the clear once SSL is terminated. Once the attacker gathers these credentials, they can submit requests to the web service provider just as authorized user do. There is not typically an authentication on the client side, beyond what is passed in the request itself so once this is compromised, then this is generally sufficient to compromise the service's authentication scheme."
        },
        {
            "id": "70",
            "name": "Try Common or Default Usernames and Passwords",
            "prerequisites": "The system uses one factor password based authentication.The adversary has the means to interact with the system.",
            "related_weakness": [
                "262",
                "263",
                "521",
                "693",
                "798"
            ],
            "solutions": "Delete all default account credentials that may be put in by the product vendor. Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user. Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users. Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.",
            "summary": "An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. \"secret\" or \"password\") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary."
        },
        {
            "id": "480",
            "name": "Escaping Virtualization",
            "prerequisites": "",
            "related_weakness": [
                "693"
            ],
            "solutions": "Ensure virtualization software is current and up-to-date. Abide by the least privilege principle to avoid assigning users more privileges than necessary.",
            "summary": "An adversary gains access to an application, service, or device with the privileges of an authorized or privileged user by escaping the confines of a virtualized environment. The adversary is then able to access resources or execute unauthorized code within the host environment, generally with the privileges of the user running the virtualized process. Successfully executing an attack of this type is often the first step in executing more complex attacks."
        },
        {
            "id": "107",
            "name": "Cross Site Tracing",
            "prerequisites": "HTTP TRACE is enabled on the web server The destination system is susceptible to XSS or an adversary can leverage some other weakness to bypass the same origin policy Scripting is enabled in the client's browser HTTP is used as the communication protocol between the server and the client",
            "related_weakness": [
                "648",
                "693"
            ],
            "solutions": "Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default. Patch web browser against known security origin policy bypass exploits.",
            "summary": "Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to destination system's web server. The adversary first gets a malicious script to run in the victim's browser that induces the browser to initiate an HTTP TRACE request to the web server. If the destination web server allows HTTP TRACE requests, it will proceed to return a response to the victim's web browser that contains the original HTTP request in its body. The function of HTTP TRACE, as defined by the HTTP specification, is to echo the request that the web server receives from the client back to the client. Since the HTTP header of the original request had the victim's session cookie in it, that session cookie can now be picked off the HTTP TRACE response and sent to the adversary's malicious site. XST becomes relevant when direct access to the session cookie via the \"document.cookie\" object is disabled with the use of httpOnly attribute which ensures that the cookie can be transmitted in HTTP requests but cannot be accessed in other ways. Using SSL does not protect against XST. If the system with which the victim is interacting is susceptible to XSS, an adversary can exploit that weakness directly to get his or her malicious script to issue an HTTP TRACE request to the destination system's web server. In the absence of an XSS weakness on the site with which the victim is interacting, an adversary can get the script to come from the site that he controls and get it to execute in the victim's browser (if he can trick the victim's into visiting his malicious website or clicking on the link that he supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the adversary's malicious script cannot directly issue an HTTP TRACE request to the destination system's web server because the malicious script did not originate at that domain. An adversary will then need to find a way to exploit another weakness that would enable him or her to get around the same origin policy protection."
        },
        {
            "id": "51",
            "name": "Poison Web Service Registry",
            "prerequisites": "The attacker must be able to write to resources or redirect access to the service registry.",
            "related_weakness": [
                "285",
                "693",
                "74"
            ],
            "solutions": "Design: Enforce principle of least privilege Design: Harden registry server and file access permissions Implementation: Implement communications to and from the registry using secure protocols",
            "summary": "SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata (to effect a denial of service), and delete information about service provider interfaces. WS-Addressing is used to virtualize services, provide return addresses and other routing information, however, unless the WS-Addressing headers are protected they are vulnerable to rewriting. The attacker that can rewrite WS-addressing information gains the ability to route service requesters to any service providers, and the ability to route service provider response to any service. Content in a registry is deployed by the service provider. The registry in an SOA or Web Services system can be accessed by the service requester via UDDI or other protocol. The basic flow for the attacker consists of either altering the data at rest in the registry or uploading malicious content by spoofing a service provider. The service requester is then redirected to send its requests and/or responses to services the attacker controls."
        },
        {
            "id": "59",
            "name": "Session Credential Falsification through Prediction",
            "prerequisites": "The target host uses session IDs to keep track of the users. Session IDs are used to control access to resources. The session IDs used by the target host are predictable. For example, the session IDs are generated using predictable information (e.g., time).",
            "related_weakness": [
                "200",
                "285",
                "290",
                "330",
                "331",
                "346",
                "384",
                "488",
                "539",
                "6",
                "693",
                "719"
            ],
            "solutions": "Use a strong source of randomness to generate a session ID. Use adequate length session IDs Do not use information available to the user in order to generate session ID (e.g., time). Ideas for creating random numbers are offered by Eastlake [RFC1750] Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.",
            "summary": "This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking."
        },
        {
            "id": "49",
            "name": "Password Brute Forcing",
            "prerequisites": "An adversary needs to know a username to target. The system uses password based authentication as the one factor authentication mechanism. An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical.",
            "related_weakness": [
                "257",
                "262",
                "263",
                "521",
                "693"
            ],
            "solutions": "Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user. Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users. Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.",
            "summary": "In this attack, the adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password. A system will be particularly vulnerable to this type of an attack if it does not have a proper enforcement mechanism in place to ensure that passwords selected by users are strong passwords that comply with an adequate password policy. In practice a pure brute force attack on passwords is rarely used, unless the password is suspected to be weak. Other password cracking methods exist that are far more effective (e.g. dictionary attacks, rainbow tables, etc.). Knowing the password policy on the system can make a brute force attack more efficient. For instance, if the policy states that all passwords must be of a certain level, there is no need to check smaller candidates."
        },
        {
            "id": "55",
            "name": "Rainbow Table Password Cracking",
            "prerequisites": "Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table. Salt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations). The system uses one factor password based authentication.",
            "related_weakness": [
                "261",
                "262",
                "263",
                "521",
                "693",
                "719",
                "916"
            ],
            "solutions": "Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it.",
            "summary": "An attacker gets access to the database table where hashes of passwords are stored. He then uses a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system. A password rainbow table stores hash chains for various passwords. A password chain is computed, starting from the original password, P, via a reduce(compression) function R and a hash function H. A recurrence relation exists where Xi+1 = R(H(Xi)), X0 = P. Then the hash chain of length n for the original password P can be formed: X1, X2, X3, ... , Xn-2, Xn-1, Xn, H(Xn). P and H(Xn) are then stored together in the rainbow table. Constructing the rainbow tables takes a very long time and is computationally expensive. A separate table needs to be constructed for the various hash algorithms (e.g. SHA1, MD5, etc.). However, once a rainbow table is computed, it can be very effective in cracking the passwords that have been hashed without the use of salt."
        },
        {
            "id": "16",
            "name": "Dictionary-based Password Attack",
            "prerequisites": "The system uses one factor password based authentication. The system does not have a sound password policy that is being enforced. The system does not implement an effective password throttling mechanism.",
            "related_weakness": [
                "262",
                "263",
                "521",
                "693"
            ],
            "solutions": "Create a strong password policy and ensure that your system enforces this policy. Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-02.",
            "summary": "An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern."
        },
        {
            "id": "17",
            "name": "Using Malicious Files",
            "prerequisites": "System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.",
            "related_weakness": [
                "264",
                "270",
                "272",
                "275",
                "282",
                "285",
                "59",
                "693",
                "732"
            ],
            "solutions": "Design: Enforce principle of least privilege Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands. Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
            "summary": "An attack of this type exploits a system's configuration that allows an attacker to either directly access an executable file, for example through shell access; or in a possible worst case allows an attacker to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface."
        },
        {
            "id": "20",
            "name": "Encryption Brute Forcing",
            "prerequisites": "Ciphertext is known. Encryption algorithm and key size are known.",
            "related_weakness": [
                "326",
                "327",
                "693",
                "719"
            ],
            "solutions": "Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long. In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months.",
            "summary": "An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext."
        },
        {
            "id": "36",
            "name": "Using Unpublished APIs",
            "prerequisites": "The architecture under attack must publish or otherwise make available services that clients can attach to, either in an unauthenticated fashion, or having obtained an authentication token elsewhere. The service need not be 'discoverable', but in the event it isn't it must have some way of being discovered by an attacker. This might include listening on a well-known port. Ultimately, the likelihood of exploit depends on discoverability of the vulnerable service.",
            "related_weakness": [
                "306",
                "693",
                "695"
            ],
            "solutions": "Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.",
            "summary": "An adversary searches for and invokes APIs that the target system designers did not intend to be publicly available. If these APIs fail to authenticate requests the attacker may be able to invoke functionality they are not authorized for."
        },
        {
            "id": "1",
            "name": "Accessing Functionality Not Properly Constrained by ACLs",
            "prerequisites": "The application must be navigable in a manner that associates elements (subsections) of the application with ACLs. The various resources, or individual URLs, must be somehow discoverable by the attacker The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.",
            "related_weakness": [
                "276",
                "285",
                "434",
                "693",
                "721",
                "732"
            ],
            "solutions": "In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.",
            "summary": "In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to."
        },
        {
            "id": "127",
            "name": "Directory Indexing",
            "prerequisites": "The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name. The adversary must be able to control the path that is requested of the target. The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory. The server version or patch level must not inherently prevent known directory listing attacks from working.",
            "related_weakness": [
                "276",
                "285",
                "288",
                "424",
                "425",
                "693",
                "721",
                "732"
            ],
            "solutions": "1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors. 2. Preventing with .htaccess in Apache web server: In .htaccess, write \"Options-indexes\". 3. Suppressing error messages: using error 403 \"Forbidden\" message exactly like error 404 \"Not Found\" message.",
            "summary": "An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks."
        },
        {
            "id": "22",
            "name": "Exploiting Trust in Client",
            "prerequisites": "Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side.",
            "related_weakness": [
                "20",
                "200",
                "287",
                "290",
                "693"
            ],
            "solutions": "Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system. Design: Do not rely on client validation or encoding for security purposes. Design: Utilize digital signatures to increase authentication assurance. Design: Utilize two factor authentication to increase authentication assurance. Implementation: Perform input validation for all remote content.",
            "summary": "An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack."
        },
        {
            "id": "87",
            "name": "Forceful Browsing",
            "prerequisites": "The forcibly browseable pages or accessible resources must be discoverable and improperly protected.",
            "related_weakness": [
                "285",
                "425",
                "693"
            ],
            "solutions": "Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context. Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context.",
            "summary": "An attacker employs forceful browsing to access portions of a website that are otherwise unreachable through direct URL entry. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected."
        }
    ],
    "cvss": 6.5,
    "cvss-time": "2020-10-19T18:15:00",
    "cvss-vector": "AV:N/AC:L/Au:S/C:P/I:P/A:P",
    "cwe": "CWE-693",
    "id": "CVE-2019-1003030",
    "impact": {
        "availability": "PARTIAL",
        "confidentiality": "PARTIAL",
        "integrity": "PARTIAL"
    },
    "last-modified": "2020-10-19T18:15:00",
    "redhat": {
        "advisories": [
            {
                "rhsa": {
                    "id": "RHSA-2019:0739"
                }
            }
        ],
        "rpms": [
            "jenkins-2-plugins-0:3.11.1552336312-1.el7"
        ]
    },
    "references": [
        "http://packetstormsecurity.com/files/159603/Jenkins-2.63-Sandbox-Bypass.html",
        "http://www.securityfocus.com/bid/107476",
        "https://access.redhat.com/errata/RHSA-2019:0739",
        "https://jenkins.io/security/advisory/2019-03-06/#SECURITY-1336%20(2)"
    ],
    "refmap": {
        "bid": [
            "107476"
        ],
        "confirm": [
            "https://jenkins.io/security/advisory/2019-03-06/#SECURITY-1336%20(2)"
        ],
        "misc": [
            "http://packetstormsecurity.com/files/159603/Jenkins-2.63-Sandbox-Bypass.html"
        ]
    },
    "summary": "A sandbox bypass vulnerability exists in Jenkins Pipeline: Groovy Plugin 2.63 and earlier in pom.xml, src/main/java/org/jenkinsci/plugins/workflow/cps/CpsGroovyShell.java that allows attackers able to control pipeline scripts to execute arbitrary code on the Jenkins master JVM.",
    "vulnerable_configuration": [
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.0:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.0:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.1:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.1:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.2:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.2:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.3:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.3:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.4:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.4:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.5:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.5:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.6:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.6:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.7:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.7:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.8:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.8:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.9:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.9:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.10:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.10:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.11:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.11:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.12:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.12:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.13:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.13:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.14:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.14:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.15:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.15:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.16:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.16:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.17:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.17:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.18:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.18:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.19:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.19:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.20:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.20:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.21:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.21:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.22:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.22:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.23:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.23:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.24:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.24:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.25:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.25:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.26:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.26:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.27:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.27:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.28:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.28:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.29:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.29:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.30:-:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.30:-:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.30:alpha:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.30:alpha:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.30:alpha2:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.30:alpha2:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.30:beta:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.30:beta:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.31:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.31:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.32:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.32:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.33:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.33:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.34:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.34:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.35:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.35:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.36:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.36:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.36.1:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.36.1:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.37:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.37:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.38:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.38:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.39:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.39:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.40:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.40:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.41:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.41:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.42:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.42:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.43:-:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.43:-:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.43:beta1:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.43:beta1:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.43:beta2:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.43:beta2:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.43:beta3:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.43:beta3:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.43:beta4:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.43:beta4:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.44:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.44:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.45:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.45:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.46:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.46:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.46.1:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.46.1:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.46.2:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.46.2:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.47:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.47:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.48:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.48:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.49:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.49:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.50:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.50:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.51:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.51:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.52:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.52:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.53:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.53:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.54:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.54:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.54.1:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.54.1:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.54.2:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.54.2:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.55:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.55:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.56:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.56:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.57:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.57:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.57.1:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.57.1:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.57.2:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.57.2:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.57.3:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.57.3:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.58:-:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.58:-:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.58:beta1:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.58:beta1:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.59:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.59:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.60:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.60:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.61:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.61:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.61.1:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.61.1:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.61.2:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.61.2:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.61.3:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.61.3:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.62:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.62:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.63:*:*:*:*:jenkins:*:*",
            "title": "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.63:*:*:*:*:jenkins:*:*"
        },
        {
            "id": "cpe:2.3:a:redhat:openshift_container_platform:3.11:*:*:*:*:*:*:*",
            "title": "cpe:2.3:a:redhat:openshift_container_platform:3.11:*:*:*:*:*:*:*"
        }
    ],
    "vulnerable_configuration_cpe_2_2": [],
    "vulnerable_product": [
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.0:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.1:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.2:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.3:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.4:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.5:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.6:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.7:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.8:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.9:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.10:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.11:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.12:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.13:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.14:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.15:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.16:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.17:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.18:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.19:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.20:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.21:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.22:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.23:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.24:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.25:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.26:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.27:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.28:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.29:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.30:-:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.30:alpha:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.30:alpha2:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.30:beta:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.31:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.32:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.33:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.34:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.35:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.36:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.36.1:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.37:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.38:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.39:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.40:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.41:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.42:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.43:-:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.43:beta1:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.43:beta2:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.43:beta3:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.43:beta4:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.44:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.45:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.46:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.46.1:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.46.2:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.47:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.48:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.49:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.50:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.51:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.52:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.53:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.54:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.54.1:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.54.2:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.55:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.56:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.57:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.57.1:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.57.2:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.57.3:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.58:-:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.58:beta1:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.59:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.60:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.61:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.61.1:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.61.2:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.61.3:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.62:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:jenkins:pipeline\\:_groovy:2.63:*:*:*:*:jenkins:*:*",
        "cpe:2.3:a:redhat:openshift_container_platform:3.11:*:*:*:*:*:*:*"
    ]
}